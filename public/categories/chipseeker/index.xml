<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ChIPseeker on KJY</title>
    <link>https://kongjianyang.github.io/categories/chipseeker/</link>
    <description>Recent content in ChIPseeker on KJY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Mar 2022 14:42:27 -0500</lastBuildDate><atom:link href="https://kongjianyang.github.io/categories/chipseeker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ChIPseeker使用介绍</title>
      <link>https://kongjianyang.github.io/cn/2022/03/26/chipseeker/</link>
      <pubDate>Sat, 26 Mar 2022 14:42:27 -0500</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/03/26/chipseeker/</guid>
      <description>主要参考这篇文章：
190-学习一遍ChIPseeker使用 | BIOINFOPLANET (jieandze1314.com) 1 ChIP-seq简介 ChIP是指染色质免疫沉淀，它通特异结合抗体将DNA结合蛋白免疫沉淀，可以用于捕获蛋白质（如转录因子，组蛋白修饰）的DNA靶点。之前结合芯片就有ChIP-on-chip，后来二代测序加持诞生了ChIP-seq。优点是：不再需要设计探针（探针往往存在着一定的偏向性）
2007年来自三个不同的实验室，几乎是同时间出来（最长差不了3个月），分别发CNS，一起定义了这个ChIPseq技术
 Johnson DS, Mortazavi A et al. (2007) Genome-wide mapping of in vivo protein–DNA interactions. Science 316: 1497–1502 Robertson G et al.(2007) Genome-wide profiles of STAT1 DNA association using chromatin immunoprecipitation and massively parallel sequencing. Nature Methods 4: 651–657 Schmid et al. (2007) ChIP-Seq Data reveal nucleosome architecture of human promoters. Cell 131: 831–832  主要有4步：Cross-linking、Sonication、IP、Sequencing
简而言之是：DNA和蛋白质交联(cross-linking)、超声(sonication)将染色体随机切割、利用抗原抗体的特异性识别(IP)、把目标蛋白相结合的DNA片段沉淀下来，反交联释放DNA片段，最后是测序(sequencing)
分析流程示例图1： 分析流程示例图2： 原始数据=》质控=》比对=》拿到DNA片段在染色体上的位置信息=》peak calling （去除背景噪音）=》拿到peaks（protein binding site）=》下游分析（可视化、找相关基因、motif分析等等）</description>
    </item>
    
    <item>
      <title>R语言str_replace多匹配</title>
      <link>https://kongjianyang.github.io/cn/2021/03/26/str_replace/</link>
      <pubDate>Fri, 26 Mar 2021 14:42:27 -0500</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2021/03/26/str_replace/</guid>
      <description>主要参考这个回答：r - stringr str_replace on multiple patterns and replacements? - Stack Overflow library(stringr) library(purrr) reduce2(c(&amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;), c(&amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;), .init = &amp;#39;abcdef&amp;#39;, str_replace) #[1] &amp;#34;aBcDef&amp;#34; 这种方法在大批量替换rowname的时候很有用，所以解析一下。
在purrr包中
map表示映射，可以在一个或多个列表/向量的每个位置上应用相同函数进行计算。map函数的映射对象只有一个。
 map(.x, .f, …) .x: 列表或向量； .f: 映射函数； ...: 映射函数的其他参数
 map2函数是map函数的变形，映射对象有两个，需要注意两个列表/向量的长度必须相同。
 map2(.x,.y, .f, …) .x: 列表或向量； .y: 列表或向量,与.x等长； .f: 映射函数； ...: 映射函数的其他参数
 pmap函数是map函数的变形，映射对象为多个，需要注意多个列表/向量的长度必须相同。
 pmap(.l, .f, …) .l: 列表向量/列表； .f: 映射函数； ...: 映射函数的其他参数
 reduce函数表示规约，计算向量中相邻的两个元素，结果再与第三个元素计算，…，最后计算出一个值。  reduce(.x, .f, …) .x: 列表向量/列表； .</description>
    </item>
    
  </channel>
</rss>
