<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on KJY</title>
    <link>https://kongjianyang.github.io/categories/hugo/</link>
    <description>Recent content in hugo on KJY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Sep 2022 19:10:27 -0400</lastBuildDate><atom:link href="https://kongjianyang.github.io/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用Python进行文件重命名</title>
      <link>https://kongjianyang.github.io/cn/2022/09/24/python/</link>
      <pubDate>Sat, 24 Sep 2022 19:10:27 -0400</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/09/24/python/</guid>
      <description># !#/usr/bin/python3 import os import re import datetime  dir = os.getcwd() files = os.listdir(&amp;#34;./&amp;#34;) # 判断字符串 oldStr = r&amp;#34;(\d{4}-\d{1,2}-\d{1,2}-)&amp;#34; newStr = &amp;#34;&amp;#34;  #判断生成时间 now = datetime.datetime.now() deltaH = datetime.timedelta(days=360)  d = os.walk(dir) for path,dirList,fileList in d:  for fileName in fileList:  oldFile = os.path.join(path, fileName)  if re.findall(oldStr, fileName):  f = datetime.datetime.fromtimestamp(os.path.getmtime(oldFile))  if f &amp;gt; (now-deltaH):  print(oldFile)  newName = re.sub(oldStr, newStr, fileName)  newFile = os.</description>
    </item>
    
    <item>
      <title>GSEA和GSVA分析</title>
      <link>https://kongjianyang.github.io/cn/2022/06/28/gsea/</link>
      <pubDate>Tue, 28 Jun 2022 19:10:27 -0400</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/06/28/gsea/</guid>
      <description>GSEA全称Gene Set Enrichment Analysis，GSVA全称Gene Set Variation Analysis，它们都是基于基因集开展的分析，因此我们先要了解基因集的定义。基因集顾名思义就是一些基因的集合，任何一些基因放在一起都可以叫做基因集，但是我们用来分析的基因集要求有一定的生物学意义。
MSigDB（Molecular Signatures Database）数据库中定义了已知的基因集合：http://software.broadinstitute.org/gsea/msigdb 包括H和C1-C7八个系列（Collection），每个系列分别是：
H:hallmark gene sets （癌症）特征基因集合，共50组，最常用； C1: positional gene sets 位置基因集合，根据染色体位置，共326个，用的很少； C2: curated gene sets：（专家）校验基因集合，基于通路、文献等： C3: motif gene sets：模式基因集合，主要包括microRNA和转录因子靶基因两部分 C4: computational gene sets：计算基因集合，通过挖掘癌症相关芯片数据定义的基因集合； C5: GO gene sets：Gene Ontology 基因本体论，包括BP（生物学过程biological process，细胞原件cellular component和分子功能molecular function三部分） C6: oncogenic signatures：癌症特征基因集合，大部分来源于NCBI GEO 发表芯片数据 C7: immunologic signatures: 免疫相关基因集合。
常规GO/KEGG富集分析需要设定阈值过滤差异基因，阈值太宽富集的结果太多，阈值太严又可能会遗漏一些关键结果。GO/KEGG富集的结果通常还很宽泛，并不能很好地解释生物学现象。有鉴于此，Broad研究所开发了基因集富集分析(GSEA)方法。GSEA使用无监督算法，不用过滤任何基因，配合MSigDB数据库使用，更容易找到解释生物学现象的基因集.
GSEA分析要先将样本做组间对比分析, 对比分析之后要按结果将基因排序，以差异倍数方法为例，把所有基因按差异倍数(FC)的值降序排列以供后续分析。
上图小人脚下的小方块代表排序好的差异基因列表，蓝色之外的其他色块代表属于某个基因集的基因，如黄色属于基因集A，绿色属于基因集B。最下面高低不等的竖条代表与基因列表对应的FC值，红色上调、蓝色下调、黄色没有变化。基因集的富集分析需要经历三步：
基因集A富集分析时，小人从基因列表的左端走到右端，每经过一个蓝色基因扣分，每遇到一个黄色基因加分，扣分时与FC无关，加分时考虑FC的权重。基因集A最终的富集分数(ES)是小人曾经得过的最高/低分，实际公式比这复杂，但基本理念如此。
采用置换检验(Permutation testing)计算基因集A的显著性，即p值。
基因集A富集分析完成后，按上述同样的方法完成基因集B、C直至所有输入基因集的分析。所有需要富集分析的基因集都计算ES和p值之后，将ES转换为标准富集分数(NES)，并计算校正后p值。
(1)背景基因排序：将全部基因按照某种指标（差异分析p值，表型相关性，表达量等）进行排序，比如log2FC排序。
(2)目标基因富集：将某个特定类型的基因在排序表中标出，目标基因可以是某个通路或GO terms的基因等。
(3)计算富集分数：使用加权法，计算ES值变化。对位于中部（与性状相关性低）的部分采用较小的权值，所以越集中在两端，与表型的相关性越高。ES曲线最大值为富集分数（Enrichment Score）。
(4)Permutation test：对基因集的ES值进行显著性检验及多重假设检验，从而计算出显著富集的基因集。
enrichmentScore：富集得分。ES 反映基因集中的基因（S）在排序列表基因（L）的两端富集的程度。计算方式是，从基因集 L 的第一个基因开始，计算一个累计统计值。当遇到一个落在 D 里面的基因，则增加统计值。遇到一个不在 S 里面的基因，则降低统计值。每一步统计值增加或减少的幅度与基因的表达变化程度（更严格的是与基因和表型的关联度，可能是 fold-change，也可能是 pearson corelation 值）是相关的（可以是线性相关，也可以是指数相关）。富集得分 ES 最后定义为最大的峰值。正值 ES 表示基因集在列表的顶部富集，负值 ES 表示基因集在列表的底部富集。</description>
    </item>
    
    <item>
      <title>为Mac系统添加QuickLook插件</title>
      <link>https://kongjianyang.github.io/cn/2022/05/18/html/</link>
      <pubDate>Wed, 18 May 2022 19:10:27 -0400</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/05/18/html/</guid>
      <description>安装命令：brew cask install  卸载命令：brew cask uninstall  软件包被安装的路径： /Users/用户名称/Library/QuickLook
QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。
需要拓展安装一些插件
最方便的方式是通过brew进行
查找所有插件
brew search quicklook ==&amp;gt; Formulae quickjs ==&amp;gt; Casks caskroom/cask/epubquicklook ipynb-quicklook caskroom/cask/gltfquicklook osirix-quicklook caskroom/cask/ipynb-quicklook quicklook-csv caskroom/cask/osirix-quicklook quicklook-json ✔ caskroom/cask/quicklook-csv quicklook-pat caskroom/cask/quicklook-json ✔ quicklook-pfm caskroom/cask/quicklook-pat quicklookapk caskroom/cask/quicklook-pfm quicklookase ✔ caskroom/cask/quicklookapk receiptquicklook caskroom/cask/quicklookase ✔ ttscoff-mmd-quicklook caskroom/cask/receiptquicklook webpquicklook ✔ caskroom/cask/ttscoff-mmd-quicklook quickbooks caskroom/cask/webpquicklook ✔ quickboot epubquicklook quickjson gltfquicklook quicknfo 安装一些插件
brew install --cask qlimagesize qlvideo qlmarkdown brew install --cask qlcolorcode quicklook-json qlstephen suspicious-package provisionql quicklook-csv brew install highlight luarocks # 相关的依赖包 </description>
    </item>
    
    <item>
      <title>其他源产生的html文件兼容hug</title>
      <link>https://kongjianyang.github.io/cn/2022/05/07/html/</link>
      <pubDate>Sat, 07 May 2022 19:10:27 -0400</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/05/07/html/</guid>
      <description>迁移博客系统之后之前一些产生的html文件不能在hugo系统中显示了，例如从rmd或者jupyter生产的html文件，尝试之后发现问题是生产的html文件没有frontmatter，加上之后就能解决问题。
参考：[SOLVED] Using HTML for content pages instead of Markdown - support - HUGO (gohugo.io) 所以在html文件上加下如下内容就能使之显示。
+++ title = &amp;#34;R语言元编程&amp;#34; date = &amp;#34;2020-04-17T12:15:02-00:00&amp;#34; categories = &amp;#34;R&amp;#34; tags = &amp;#34;R&amp;#34; +++ &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：
--- title: Hello World date: 2013/7/13 20:46:25 --- 补充知识 仅仅使用 markdown 格式写完文章是不够的，还需要在 .md 文档前面声明文档的信息，告诉 Hugo 这篇文章的标题、写作时间，这个时候就需要用到 Hugo Front Matter Formats 元数据格式。
Front Matter一般放在文章的最顶部，Hugo支持三种书写格式，
 TOML使用+++来包裹内容 YAML使用---来包裹内容 JSON使用{和}来包裹内容  可配置的内容见Hugo官方文档: front-matter 。
在使用hugo new来创建文章时，会查找archetypes下的内容并填充到文章内容，查找archetypes原型内容的顺序如下:</description>
    </item>
    
    <item>
      <title>Hugo文章加密</title>
      <link>https://kongjianyang.github.io/cn/2022/04/30/encryptor/</link>
      <pubDate>Sat, 30 Apr 2022 19:10:27 -0400</pubDate>
      
      <guid>https://kongjianyang.github.io/cn/2022/04/30/encryptor/</guid>
      <description>参考的这个资料：
https://github.com/Li4n0/hugo_encryptor/blob/master/README-zh_CN.md 下载 Hugo-Encryptor 并安装其所需要的依赖库
$ git clone https://github.com/Li4n0/hugo_encryptor.git $ cd hugo_encryptor $ chmod +x hugo_encryptor.py $ pip3 install -r requirements.txt 将 hugo-encryptor.py放入博客根目录
$ cp hugo-encryptor.py /path/to/your/blog/hugo-encryptor.py 将shortcodes/hugo-encryptor.html放入博客shortcodes目录
$ mkdir -p /path/to/your/blog/layouts/shortcodes $ cp shortcodes/hugo-encryptor.html /path/to/your/blog/layouts/shortcodes/hugo-encryptor.html 使用方法
  使用 hugo-encryptor标签包裹需要加密文章内容   生成网站
rm -rf public #删除原来的 public 文件夹 hugo #重新生成 public 文件夹   进行加密
python3 hugo-encryptor.py   至此，文章就已经被加密好了，然后把 public 文件夹内容上传到服务器就好了。
 这里必须存在一些明文文字以及概要标签:
文章的部分内容被密码保护：
  --- DON&#39;T MODIFY THIS LINE --- 这里是你要加密的内容!</description>
    </item>
    
  </channel>
</rss>
