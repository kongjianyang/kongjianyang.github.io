<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R on KJY</title><link>https://kongjianyang.github.io/categories/r/</link><description>Recent content in R on KJY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kongjianyang.github.io/categories/r/index.xml" rel="self" type="application/rss+xml"/><item><title>R语言文本处理</title><link>https://kongjianyang.github.io/cn/2018/12/27/r%E8%AF%AD%E8%A8%80%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</link><pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/27/r%E8%AF%AD%E8%A8%80%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</guid><description>常见函数 trimws(x)删去字符型向量x的每个元素的开头和结尾的所有空格。加选项which=’left’可以仅删去开头的空格， 选项which=’right’可以仅删去结尾的空格。
trimws(c(&amp;quot; 李明&amp;quot;, &amp;quot;李明 &amp;quot;, &amp;quot; 李明 &amp;quot;, &amp;quot;李 明&amp;quot;)) ## [1] &amp;quot;李明&amp;quot; &amp;quot;李明&amp;quot; &amp;quot;李明&amp;quot; &amp;quot;李 明&amp;quot; sprintf是C语言中sprintf的向量化版本，可以把一个元素或一个向量的各个元素按照C语言输出格式转换为字符型向量。
sprintf(&amp;#39;tour%02d.jpg&amp;#39;, 1:10) ## [1] &amp;quot;tour01.jpg&amp;quot; &amp;quot;tour02.jpg&amp;quot; &amp;quot;tour03.jpg&amp;quot; &amp;quot;tour04.jpg&amp;quot; &amp;quot;tour05.jpg&amp;quot; ## [6] &amp;quot;tour06.jpg&amp;quot; &amp;quot;tour07.jpg&amp;quot; &amp;quot;tour08.jpg&amp;quot; &amp;quot;tour09.jpg&amp;quot; &amp;quot;tour10.jpg&amp;quot; substring函数求字符串字串， 用开始字符位置和结束字符位置设定字串位置。
substring(c(&amp;quot;123456789&amp;quot;, &amp;quot;abcdefg&amp;quot;), 3, 5) ## [1] &amp;quot;345&amp;quot; &amp;quot;cde&amp;quot; 用gsub(pattern, replacement, x, fixed=TRUE) 把字符型向量x中每个元素中出现的子串 pattern都替换为replacement。
gsub(&amp;#39;the&amp;#39;, &amp;#39;**&amp;#39;, c(&amp;#39;New theme&amp;#39;, &amp;#39;Old times&amp;#39;, &amp;#39;In the present theme&amp;#39;), fixed=TRUE) ## [1] &amp;quot;New **me&amp;quot; &amp;quot;Old times&amp;quot; &amp;quot;In ** present **me&amp;quot; strsplit(x,split,fixed=TRUE)可以把字符型向量x的每一个元素按分隔符split拆分为一个字符型向量， strsplit的结果为一个列表， 每个列表元素对应于x的每个元素。</description></item><item><title>R语言中的调色板</title><link>https://kongjianyang.github.io/cn/2018/12/20/r%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/20/r%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/</guid><description>使用RColorBrewer包实现R图形的亚瑟个性化
library(RColorBrewer) display.brewer.all() 连续型调色板（第一个颜色列表），适用于从低到高（梯度）的有序数据。调色板名称是：Blues，BuGn，BuPu，GnBu，Greens，Grays，Oranges，OrRd，PuBu，PuBuGn，PuRd，Purples，RdPu，Reds，YlGn，YlGnBu YlOrBr，YlOrRd。
定性调色板（第二种颜色列表），最适合表示名义或分类数据。它们并不意味着群体之间的巨大差异。 调色板名称为：Accent，Dark2，Paired，Pastel1，Pastel2，Set1，Set2，Set3。
差异调色板（第三种颜色列表），强调数据范围两端颜色相反。分散的调色板是：BrBG，PiYG，PRGn，PuOr，RdBu，RdGy，RdYlBu，RdYlGn，Spectral
-仅显示色盲友好的调色板，要仅显示色盲友好的brewer调色板，请指定colorblindFriendly选项= TRUE，如下所示：
display.brewer.all(colorblindFriendly = TRUE) # 1. Visualize a single RColorBrewer palette # by specifying its name display.brewer.pal(n, name) # 2. Return the hexadecimal color code of the palette brewer.pal(n, name) 函数参数的描述：n：调色板中不同颜色的数量，最小值为3，最大值取决于调色板。 name：上面列表中的调色板名称。 例如name = RdBu。
以下R代码演示了如何显示一个单一的r颜色brewer调色板。
# View a single RColorBrewer palette by specifying its name display.brewer.pal(n = 8, name = &amp;#39;Dark2&amp;#39;) # Hexadecimal color specification brewer.</description></item><item><title>Rstudio的常用快捷键</title><link>https://kongjianyang.github.io/cn/2018/12/18/rstudio%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/18/rstudio%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>Rstudio IDE Cheat Sheet
0. 常用 Windows Mac 清空控制台 Ctrl+L Command+L 新建一个文件 Ctrl+Shift+N Command+Shift+N 打开文件 Ctrl+O Command+O 保存当前文件 Ctrl+S Command+S 关闭当前文件 Ctrl+W Command+W 关闭所有打开的文件 Ctrl+Shift+W Command+Shift+W 运行当前/被选中的代码 Ctrl+Enter Command+Enter 运行当前文件 Ctrl+Alt+R Command+Option+R 运行当前代码块 Ctrl+Alt+C Command+Option+C 运行下一个代码块 Ctrl+Alt+N Command+Option+N 执行一个外部文件中的代码 Ctrl+Shift+O Command+Shift+O 执行当前文件中的代码 Ctrl+Shift+S Command+Shift+S 折叠选中代码 Alt+L Command+Option+L 打开选中代码 Shift+Alt+L Command+Shift+Option+L 折叠所有代码 Alt+0 Command+Option+0 打开所有代码 Shift+Alt+0 Command+Shift+Option+0 切换到前一个tab Ctrl+Alt+Left Ctrl+Option+Left 切换到下一个tab Ctrl+Alt+Right Ctrl+Option+Right 切换到第一个tab Ctrl+Shift+Alt+Left Ctrl+Shift+Option+Left 切换到最后一个tab Ctrl+Shift+Alt+Right Ctrl+Shift+Option+Right 注释/取消注释当前行 Ctrl+Shift+C Command+Shift+C 1.</description></item><item><title>R从数据框中按组别移除离群值(outlier)</title><link>https://kongjianyang.github.io/cn/2018/12/14/r%E4%BB%8E%E6%95%B0%E6%8D%AE%E6%A1%86%E4%B8%AD%E6%8C%89%E7%BB%84%E5%88%AB%E7%A7%BB%E9%99%A4%E7%A6%BB%E7%BE%A4%E5%80%BCoutlier/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/14/r%E4%BB%8E%E6%95%B0%E6%8D%AE%E6%A1%86%E4%B8%AD%E6%8C%89%E7%BB%84%E5%88%AB%E7%A7%BB%E9%99%A4%E7%A6%BB%E7%BE%A4%E5%80%BCoutlier/</guid><description>离群值(outlier)通常被定义为小于 QL - l.5 IQR 或者 大于 Qu + 1.5 IQR的值，QL称为下四分位数， Qu称为上四分位数，IQR称为四分位数间距，是Qu上四分位数和QL下四分位数之差，其间包括了全部观察值的一半。
1.方法一： 定义功能剔除离群值
remove_outliers &amp;lt;- function(x, na.rm = TRUE, ...) { qnt &amp;lt;- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...) H &amp;lt;- 1.5 * IQR(x, na.rm = na.rm) y &amp;lt;- x y[x &amp;lt;= (qnt[1] - H)] &amp;lt;- NA y[x &amp;gt;= (qnt[2] + H)] &amp;lt;- NA y } 制造数据框
element &amp;lt;- sample(letters[1:5], 1e4, replace=T) value &amp;lt;- rnorm(1e4) df &amp;lt;- data.</description></item><item><title>R语言的小提琴图</title><link>https://kongjianyang.github.io/cn/2018/12/14/r%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E6%8F%90%E7%90%B4%E5%9B%BE/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/14/r%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B0%8F%E6%8F%90%E7%90%B4%E5%9B%BE/</guid><description/></item><item><title>R中的循环多图处理技巧</title><link>https://kongjianyang.github.io/cn/2018/12/12/r%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%A4%9A%E5%9B%BE%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/12/r%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%A4%9A%E5%9B%BE%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/</guid><description>1.制造一些图 制造一些图片，为后续的操作做准备
library(ggplot2) # This example uses the ChickWeight dataset, which comes with ggplot2 # First plot p1 &amp;lt;- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) + geom_line() + ggtitle(&amp;quot;Growth curve for individual chicks&amp;quot;) # Second plot p2 &amp;lt;- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) + geom_point(alpha=.3) + geom_smooth(alpha=.2, size=1) + ggtitle(&amp;quot;Fitted growth curve per diet&amp;quot;) # Third plot p3 &amp;lt;- ggplot(subset(ChickWeight, Time==21), aes(x=weight, colour=Diet)) + geom_density() + ggtitle(&amp;quot;Final weight, by diet&amp;quot;) # Fourth plot p4 &amp;lt;- ggplot(subset(ChickWeight, Time==21), aes(x=weight, fill=Diet)) + geom_histogram(colour=&amp;quot;black&amp;quot;, binwidth=50) + facet_grid(Diet ~ .</description></item><item><title>R中的箱线图进阶</title><link>https://kongjianyang.github.io/cn/2018/12/12/r%E4%B8%AD%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE%E8%BF%9B%E9%98%B6/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/12/12/r%E4%B8%AD%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE%E8%BF%9B%E9%98%B6/</guid><description> 箱线图能够显示出离群点（outlier），离群点也叫做异常值，通过箱线图能够很容易识别出数据中的异常值。
geom_boxplot函数中有outlier开头的多个参数，用于修改离群点的属性：
outlier.colour：离群点的颜色 outlier.fill：离群点的填充色 outlier.shape：离群点的形状 outlier.size：离群点的大小 outlier.alpha：离群点的透明度 绘制散点图，并标记异常值：
ToothGrowth$dose &amp;lt;- as.factor(ToothGrowth$dose) ggplot(ToothGrowth, aes(x=dose, y=len,color=dose)) + geom_boxplot(outlier.colour=&amp;quot;red&amp;quot;, outlier.shape=7,outlier.size=4)+ scale_color_manual(values=c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;))+ theme_bw() + theme(legend.position=&amp;quot;right&amp;quot;)+ labs(title=&amp;quot;Plot of length per dose&amp;quot;,x=&amp;quot;Dose (mg)&amp;quot;, y = &amp;quot;Length&amp;quot;)+ geom_dotplot(binaxis=&amp;#39;y&amp;#39;, stackdir=&amp;#39;center&amp;#39;, stackratio=1.5, dotsize=1.2)</description></item><item><title>R中cowplot包初步学习</title><link>https://kongjianyang.github.io/cn/2018/11/28/r%E4%B8%ADcowplot%E5%8C%85%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/11/28/r%E4%B8%ADcowplot%E5%8C%85%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</guid><description>cowplot是ggplot2包的一个简单插件，它的目的是为ggplot2提供一个出版级别的主题。
查看cowplot内的主要命令
library(cowplot) ## ## Attaching package: &amp;#39;cowplot&amp;#39; ## The following object is masked from &amp;#39;package:ggplot2&amp;#39;: ## ## ggsave ls(&amp;quot;package:cowplot&amp;quot;) ## [1] &amp;quot;add_sub&amp;quot; &amp;quot;align_margin&amp;quot; &amp;quot;align_plots&amp;quot; ## [4] &amp;quot;axis_canvas&amp;quot; &amp;quot;background_grid&amp;quot; &amp;quot;draw_figure_label&amp;quot; ## [7] &amp;quot;draw_grob&amp;quot; &amp;quot;draw_image&amp;quot; &amp;quot;draw_label&amp;quot; ## [10] &amp;quot;draw_line&amp;quot; &amp;quot;draw_plot&amp;quot; &amp;quot;draw_plot_label&amp;quot; ## [13] &amp;quot;draw_text&amp;quot; &amp;quot;GeomDrawGrob&amp;quot; &amp;quot;get_legend&amp;quot; ## [16] &amp;quot;get_panel&amp;quot; &amp;quot;ggdraw&amp;quot; &amp;quot;ggsave&amp;quot; ## [19] &amp;quot;gtable_remove_grobs&amp;quot; &amp;quot;gtable_squash_cols&amp;quot; &amp;quot;gtable_squash_rows&amp;quot; ## [22] &amp;quot;insert_xaxis_grob&amp;quot; &amp;quot;insert_yaxis_grob&amp;quot; &amp;quot;panel_border&amp;quot; ## [25] &amp;quot;plot_grid&amp;quot; &amp;quot;plot_to_gtable&amp;quot; &amp;quot;save_plot&amp;quot; ## [28] &amp;quot;theme_cowplot&amp;quot; &amp;quot;theme_map&amp;quot; &amp;quot;theme_nothing&amp;quot; 查看函数包含了哪些参数</description></item><item><title>初次使用bookdown编写书籍</title><link>https://kongjianyang.github.io/cn/2018/11/28/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8bookdown%E7%BC%96%E5%86%99%E4%B9%A6%E7%B1%8D/</link><pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/11/28/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8bookdown%E7%BC%96%E5%86%99%E4%B9%A6%E7%B1%8D/</guid><description>bookdown支持采用Rmarkdown (R代码可以运行)或普通markdown编写文档，然后编译成HTML, WORD, PDF, Epub等格式。
1. 基本使用 使用要求：
安装Rstudio 安装Pandoc conda install -c conda-forge pandoc 接下来需要到.Renviron中设置环境：
RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc 安装bookdown install.packages(&amp;#34;bookdown&amp;#34;) 下载demo：
git clone https://github.com/rstudio/bookdown-demo 然后进行编译，运行下载的示例中的bash _build.sh，_book目录下就是成书。
#!/bin/sh Rscript -e &amp;#34;bookdown::render_book(&amp;#39;index.Rmd&amp;#39;, &amp;#39;bookdown::gitbook&amp;#39;)&amp;#34; # 生成pdf需要安装好latex，如果不需要可以注释掉 Rscript -e &amp;#34;bookdown::render_book(&amp;#39;index.Rmd&amp;#39;, &amp;#39;bookdown::pdf_book&amp;#39;)&amp;#34; 如果想在Rstudio中进行预览：
bookdown:::serve_book(&amp;#34;./01Demo/bookdown-demo/&amp;#34;) 2. 文件格式 一个典型的bookdown文档包含多个章节，每个章节在一个R Markdown文件里面 (文件的语法可以是pandoc支持的markdown语法，但后缀必须为Rmd)。
每一个章节都必须以# Chapter title开头。后面可以跟一段概括性语句，概述本章的内容，方便理解，同时也防止二级标题出现在这一页。默认系统会按照文件名的顺序合并Rmd文件。
另外章节的顺序也可在_bookdown.yml文件中通过rmd_files:[&amp;quot;file1.Rmd&amp;quot;, &amp;quot;file2.Rmd&amp;quot;, ..]指定。
如果有index.Rmd，index.Rmd总是出现在第一个位置。通常index.Rmd里面也需要有一章节，如果不需要对这一章节编号的话，可以写作# Preface {-}, 关键是{-}。
在index.Rmd，可以定义Pandoc相关的YAML metadata, 比如标题、作者、日期等 (去掉#及其后的内容)。</description></item><item><title>编写自己的第一个R包并发布到GitHub</title><link>https://kongjianyang.github.io/cn/2018/11/28/%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAr%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github/</link><pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/11/28/%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAr%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0github/</guid><description>1. 编写R包 发现要深入了解一门语言要尝试给这个语言造轮子，所以就开始学习怎么开始写自己的第一个R包了。我习惯利用Rstudio编写R程序，所以在Rstudio中开发。
选择File -&amp;gt; New Project，然后选择New Directory，接着选择R Package，最后给你R包取个名字即可，如下图所示，可以选择git版本进行version control。我的包名称是Rtools。
RStudio会在当前目录（默认是个人目录下）创建一个R包文件夹，主要文件（夹）包括：man，R，DESCRIPTION，NAMESPACE以及xx.Rproj。下面是文件目录解释：
testR(包的名字，这里包的名字叫testR) | |--DESCRIPTION(描述文件，包括包的名字，版本号，标题，描述，依赖关系) |--R(函数源文件) |--function1.R |--function2.R |--... |--man(帮助文档) |--function1.Rd |--function2.Rd |--testR-package.Rd |--... |--NAMESPACE(命名空间) |--vignettes(包的描述文件，可以用rmarkdown写) |--src(非R脚本eg.C.C++,Python) |--data(R包中的数据，最好是.rda格式) |--demo(R包中的demo) |--test(R包中的测试代码) |--... DESCRIPTION文件写了这个R的描述信息，主要为了告诉别人（或者自己）这个R包的一些重要的元数据（官方说法），可以按照自己的需要进行修改：
Package: Rtools Type: Package Title: My First R Package Version: 0.1.0 Author: Liang Maintainer: The package maintainer &amp;lt;yourself@somewhere.net&amp;gt; Description: Just for learn License: GPL Encoding: UTF-8 LazyData: true RoxygenNote: 6.1.1 接下来需要准备好一个写好的R自定义函数，比如在R文件夹创建一个uniprot.R文件，然后将函数写入该文件；我们使用R包就是将输入参数导入函数中，然后函数给我们一个结果。比如我的函数如下：
idmapping &amp;lt;- function(query, inputid, outputid, fmt){ query &amp;lt;- paste(query, collapse = &amp;#34;,&amp;#34;) r &amp;lt;- httr::POST(&amp;#39;http://www.</description></item><item><title>R中进行文件及文件系统管理</title><link>https://kongjianyang.github.io/cn/2018/11/25/r%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/11/25/r%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</guid><description>本文中提到的文件系统管理主要是指文件和目录（即文件夹）的创建、查看、重命名、复制、删除和文件权限处理。
1. 文件操作 创建文件
# 创建一个空文件 A.txt file.create(&amp;quot;A.txt&amp;quot;) # 查看当前目录下的子目录和文件 list.files() # 创建多个空文件 A1.txt，A2.txt，A3.txt file.create(&amp;quot;A1.txt&amp;quot;, &amp;quot;A2.txt&amp;quot;, &amp;quot;A3.txt&amp;quot;) # 查看当前目录下的子目录和文件 list.files() # 创建一个有内容的文件 B.txt cat(&amp;quot;文件测试\n&amp;quot;, file = &amp;quot;B.txt&amp;quot;) list.files() 查看文件
# 显示当前目录中的目录和文件 ## 下面两句结果相同 list.files() # 建议使用该命令，方便记忆 dir() #python中这个意味着查看文件属性 ## 参数full.names = TRUE，确定文件显示全名 ## 参数recursive = TRUE，递归显示，即把目录下的目录和文件都以文件的形式显示 list.files(, full.names = TRUE, recursive = TRUE) # 检查文件是否存在 ## 存在的文件 file.exists(&amp;quot;A.txt&amp;quot;) ## 不存在的文件 file.exists(&amp;quot;readme.txt&amp;quot;) # 判断是否是文件 file_test(&amp;quot;-f&amp;quot;, &amp;quot;A.txt&amp;quot;) 读取文件
# 文件A.txt读取 readLines(&amp;quot;A.txt&amp;quot;) # 文件B.</description></item><item><title>R向文本文件插入内容</title><link>https://kongjianyang.github.io/cn/2018/11/25/r%E5%90%91%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%86%85%E5%AE%B9/</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><guid>https://kongjianyang.github.io/cn/2018/11/25/r%E5%90%91%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%86%85%E5%AE%B9/</guid><description>1. 创造文件并写入 fileConn&amp;lt;-file(&amp;quot;./output.txt&amp;quot;) #创造一个文件 writeLines(c(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;), fileConn) #写入内容到文件内 close(fileConn) 2. 替代方法 可以使用sink和cat命令写入文件
sink函数将输出结果重定向到文件。
使用方式：sink(file = NULL, append = FALSE, type = c(“output”, “message”),split = FALSE)
append参数：布尔值。TRUE时，输出内容追加到文件尾部。FALSE，覆盖文件原始内容。
cat函数即能输出到屏幕，也能输出到文件.
使用方式：cat(… , file = “”, sep = &amp;quot; “, fill = FALSE, labels = NULL,append = FALSE)
有file时，输出到file。无file时，输出到屏幕。
append参数：布尔值。TRUE时，输出内容追加到文件尾部。FALSE，覆盖文件原始内容。
sink(&amp;quot;./outfile2.txt&amp;quot;) cat(&amp;quot;hello\nworld&amp;quot;) ## hello ## world sink() 3. 替代方法2 R中还有一个write函数，可以直接写入内容到文件内
line=&amp;quot;hello\nworld&amp;quot; write(line,file=&amp;quot;./outfile3.txt&amp;quot;) 4. 插入文件到文本指定位置 创造文件
line=&amp;quot;hello\nworld&amp;quot; write(line,file=&amp;quot;./outfile3.txt&amp;quot;) 读取文件
txt_cont &amp;lt;- readLines(&amp;quot;./outfile3.txt&amp;quot;, warn=FALSE) length(txt_cont) ## [1] 2 在文件的第二行插入内容重新写入</description></item></channel></rss>