<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on KJY</title><link>https://kongjianyang.github.io/categories/python/</link><description>Recent content in Python on KJY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 May 2022 14:42:27 -0500</lastBuildDate><atom:link href="https://kongjianyang.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python绘制地图热图</title><link>https://kongjianyang.github.io/cn/2022/05/21/map_heatmap/</link><pubDate>Sat, 21 May 2022 14:42:27 -0500</pubDate><guid>https://kongjianyang.github.io/cn/2022/05/21/map_heatmap/</guid><description>2022-05-21-Python绘制地图热图 pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .highlight .hll { background-color: var(--jp-cell-editor-active-background) } .highlight { background: var(--jp-cell-editor-background); color: var(--jp-mirror-editor-variable-color) } .highlight .c { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment */ .</description></item><item><title>Python给包含数字的字符串排序</title><link>https://kongjianyang.github.io/cn/2020/09/12/python%E7%BB%99%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 12 Sep 2020 14:42:27 -0500</pubDate><guid>https://kongjianyang.github.io/cn/2020/09/12/python%E7%BB%99%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</guid><description>2020-09-12-Python给包含数字的字符串排序 pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .highlight .hll { background-color: var(--jp-cell-editor-active-background) } .highlight { background: var(--jp-cell-editor-background); color: var(--jp-mirror-editor-variable-color) } .highlight .c { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment */ .</description></item><item><title>snakemake教学</title><link>https://kongjianyang.github.io/cn/2019/10/17/snakemake/</link><pubDate>Thu, 17 Oct 2019 19:10:27 -0400</pubDate><guid>https://kongjianyang.github.io/cn/2019/10/17/snakemake/</guid><description>参考： https://qinqianshan.com/python/py_module/snakemake/ https://xizhihui.github.io/2018/10/28/%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA-Snakemake%E4%BD%BF%E7%94%A8%E5%88%9D%E6%AD%A5/
如果你编译过软件，那你应该见过和用过make, 但是你估计也没有仔细想过make是干嘛用的。Make是最常用的软件构建工具，诞生于1977年，主要用于C语言的项目，是为了处理编译时存在各种依赖关系，尤其是部分文件更新后，Make能够重新生成需要更新的文件以及其对应的文件。
Snakemake和Make功能一致，只不过用Python实现，增加了许多Python的特性，并且和Python一样非常容易阅读。
Snakemake是一个工作流程管理系统。它是基于Python的、用于创建可重现和可扩展的数据分析的工具（当然现在也可以直接将它当做Python的一个模块）。Snakemake所创建的流程还可以无缝扩展到服务器、集群和云环境等不同环境，当然前提是你需要提前将所需的软件和依赖配置好，一起打包封装在conda环境中。
安装软件
pip3 install snakemake 虽然snakemake广泛的应用于生物信息方面的流程编写，但是snakemake的应用并不局限于编写生物信息学的流程，这里以一个简单的合并文件的例子开始介绍snakemake的简单使用。
#首先我们建立两个文件 echo &amp;#34;Here is hello.&amp;#34; &amp;gt; hello.txt echo &amp;#34;Here is world.&amp;#34; &amp;gt; world.txt #接下来开始编写我们的Snakefile rule concat: # 这里的rule可视为snakemake定义的关键字，concat是我们自定义的这一步任务的名称 input: # input同样是snakemake的关键字，定义了在这个任务中的输入文件 expand(&amp;#34;{file}.txt&amp;#34;, file=[&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;]) #expand是一个snakemake定义的替换命令 output: # output也是snakemake的关键字，定义输出结果的保存文件 &amp;#34;merged.txt&amp;#34; shell: # 这里表示我们下面的命令将在命令行中执行 &amp;#34;cat {input} &amp;gt; {output}&amp;#34; #最后就可以在Snakefile的路径执行snakemake命令即可 snakemake cat merge.txt # Here is hello. # Here is world. 在上面的Snakefile脚本中，rule、input、output、shell、expand均为snakemake中的关键字或者命令。同时Snakefile中的每一个rule其实都可以看作是一个简单的shell脚本，通过Snakefile将多个rule组织在一起并按照我们定义的顺序来执行。另外，在output中的结果文件可以是未存在目录中的文件,这时会自动创建不存在的目录。
snakemake中的规则 rule是Snakefile中最主要的部分。如上面的例子所说，每一个rule定义了一系列pipe中的一步，每一个rule都可以当作一个shell脚本来处理，一般主要包括input、output、shell3个部分。同时还有许多上面没有列出来的用法：
wildcards。用来获取通配符匹配到的部分，例如对于通配符&amp;quot;{dataset}/file.{group}.txt&amp;quot;匹配到文件101/file.A.txt，则{wildcards.dataset}就是101，{wildcards.group}就是A。 threads。通过在rule里面指定threads参数来指定分配给程序的线程数，egthreads: 8。 resources。可用来指定程序运行的内存，eg. resources: mem_mb=800。 message。使用message参数可以指定每运行到一个rule时，在终端中给出提示信息，eg.</description></item></channel></rss>